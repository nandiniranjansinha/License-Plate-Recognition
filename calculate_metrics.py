"""
calculate_metrics.py
---------------------
Quick script to measure FPS and basic stats
from the output video generated by easyocryoloLIVE.py.
"""

import cv2
import time
import os

# --------- SETTINGS ---------
input_video = "output_with_licensev4.mp4"  # the output file from your main script
# ----------------------------

if not os.path.exists(input_video):
    print(f"⚠️ File '{input_video}' not found. Please run easyocryoloLIVE.py first.")
    exit()

cap = cv2.VideoCapture(input_video)
frame_count = 0

# Get FPS reported in the video file
fps_from_video = cap.get(cv2.CAP_PROP_FPS)
width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))
height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))
print(f"\n🎥 Video Info: {input_video}")
print(f"Resolution: {width}x{height}, FPS (from file): {fps_from_video:.2f}\n")

start_time = time.time()

# Just iterate to simulate reading workload
while True:
    ret, frame = cap.read()
    if not ret:
        break
    frame_count += 1

end_time = time.time()
cap.release()

# Calculate real playback FPS
total_time = end_time - start_time
fps_measured = frame_count / total_time if total_time > 0 else 0

print("===== METRICS SUMMARY =====")
print(f"Total frames in video: {frame_count}")
print(f"Time to read video: {total_time:.2f} seconds")
print(f"Measured playback FPS: {fps_measured:.2f}")
print("============================\n")

# Save results
with open("metrics_report.txt", "w") as f:
    f.write(f"Video: {input_video}\n")
    f.write(f"Resolution: {width}x{height}\n")
    f.write(f"Frames: {frame_count}\n")
    f.write(f"Video FPS (metadata): {fps_from_video:.2f}\n")
    f.write(f"Measured FPS: {fps_measured:.2f}\n")
    f.write(f"Processing time: {total_time:.2f} sec\n")

print("✅ Metrics saved to metrics_report.txt")
